{"version":3,"sources":["javascript/store.js","javascript/reducers/filters.js","javascript/reducers/spotify.js","javascript/reducers/index.js","javascript/createStore.js","javascript/actions/spotify.js","javascript/constants/urls.js","javascript/components/Login.jsx","javascript/containers/Login.jsx","javascript/actions/filters.js","javascript/components/filters/LimitFilter.jsx","javascript/components/filters/SelectFilter.jsx","javascript/components/filters/DateFilter.jsx","javascript/components/filters/NumericFilter.jsx","javascript/components/filters/TextFilter.jsx","javascript/components/Filter.jsx","javascript/containers/Filter.jsx","javascript/components/PlaylistCard.jsx","javascript/components/FeaturedPlaylists.jsx","javascript/containers/FeaturedPlaylists.jsx","javascript/components/App.jsx","serviceWorker.js","index.js","javascript/utils/index.js"],"names":["store","createStore","process","defaultState","values","accessToken","playlists","combineReducers","filters","state","action","type","GET_TRENDING_PLAYLISTS_FILTERS","_","get","groupById","SET_FILTER","payload","field","value","spotify","SET_ACCESS_TOKEN","token","FETCH_FEATURED_PLAYLISTS","compose","applyMiddleware","ReduxPromise","ReduxThunk","createStoreWithMiddleware","rootReducer","actionCreators","setAccessToken","fetchFeaturedPlaylists","headers","Authorization","queryString","param","url","promise","axios","Login","props","clearExpiredToken","bind","this","hash","parseHash","window","location","access_token","expiration","expires_in","setTimeout","redirect_uri","console","log","className","href","getLoginURL","Component","propType","getLoginUrl","PropTypes","func","isRequired","connect","dispatch","spotifyActions","getFilters","setFilter","LimitFilter","handleChange","name","limitFilter","filter","min","max","isFilterLoaded","maxValue","minValue","disabled","limitValue","onChange","SelectFilter","map","label","option","options","getOptions","classNamePrefix","DateFilter","date","dateFormat","moment","format","toUpperCase","formattedDate","toDate","selected","NumericFilter","protoTypes","string","TextFilter","event","target","Filter","prevProps","prevState","fetchPlaylists","currentFilters","oldFilters","isEqual","limit","locale","country","timestamp","offset","id","filterActions","playlistImage","playlist","PlaylistCard","Card","body","inverse","CardImg","top","width","src","alt","CardBody","CardTitle","playlistName","CardSubtitle","playlistOwner","Button","onClick","open","playlistLink","variant","FeaturedPlaylists","nameFilter","includes","matchesFilter","key","uniq","interval","setInterval","clearInterval","length","renderPlaylists","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","substring","split","reduce","initial","item","parts","decodeURIComponent","array","objectsByKeyValue","obj","params","Object","keys","k","encodeURIComponent","join"],"mappings":"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","file":"static/js/main.78f9a21c.chunk.js","sourcesContent":["import createStore from \"./createStore\";\nconst store = createStore(process);\n\nexport default store;","import _ from \"lodash\";\nimport {\n    GET_TRENDING_PLAYLISTS_FILTERS,\n    SET_FILTER,\n} from \"../constants/index.json\";\nimport { groupById } from \"../utils\";\n\nconst defaultState = {\n    values: {},\n}\n\nexport default (state = defaultState, action) => {\n\n    switch (action.type) {\n        case `${GET_TRENDING_PLAYLISTS_FILTERS}_FULFILLED`:\n        const filters = _.get(action, \"payload.data.filters\", defaultState.filters);\n        return {\n            ...state,\n            ...groupById(filters),\n        };\n\n        case SET_FILTER:\n        const { field, value } = action.payload;\n        return {\n            ...state,\n            values: {\n                ...state.values,\n                [field]: value,\n            }\n        }\n        \n        default:\n            return { ...state };\n    }\n};","import {\n    SET_ACCESS_TOKEN,\n    FETCH_FEATURED_PLAYLISTS,\n} from \"../constants/index.json\";\nimport _ from \"lodash\";\n\nconst defaultState = {\n    accessToken: null,\n    playlists: [],\n}\n\nexport default (state = defaultState, action) => {\n\n    switch (action.type) {\n        case SET_ACCESS_TOKEN:\n            return {\n                ...state,\n                accessToken: action.payload.token,\n            };\n\n        case `${FETCH_FEATURED_PLAYLISTS}_FULFILLED`:\n            const playlists = _.get(action.payload, \"data.playlists.items\", []);\n            return {\n                ...state,\n                playlists,\n            }\n\n        default:\n            return { ...state };\n    }\n};","import { combineReducers } from \"redux\";\n\nimport filters from \"./filters\";\nimport spotify from \"./spotify\";\n\nexport default combineReducers({\n    filters,\n    spotify,\n});","import { createStore, applyMiddleware, compose } from \"redux\";\nimport ReduxPromise from \"redux-promise-middleware\";\nimport ReduxThunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nlet createStoreWithMiddleware;\n\nexport default () => {\n    createStoreWithMiddleware = compose(\n        applyMiddleware(ReduxPromise, ReduxThunk)\n    )(createStore);\n\n    const store = createStoreWithMiddleware(rootReducer);\n    return store;\n}\n","import {\n    SET_ACCESS_TOKEN,\n    FETCH_FEATURED_PLAYLISTS,\n} from \"../constants/index.json\";\nimport axios from \"axios\";\nimport { SPOTIFY_FEATURED_PLAYLISTS } from \"../constants/urls.js\";\nimport { param } from \"../utils/index.js\";\n\nconst actionCreators = {\n    setAccessToken(token) {\n        return {\n            type: SET_ACCESS_TOKEN,\n            payload: { token },\n        };\n    },\n\n    fetchFeaturedPlaylists(accessToken, filters) {\n        const headers = { Authorization: `Bearer ${accessToken}` }\n        const queryString = param(filters);\n        const url = `${SPOTIFY_FEATURED_PLAYLISTS}?${queryString}`;\n\n        return {\n            type: FETCH_FEATURED_PLAYLISTS,\n            payload: { \n                promise: axios.get(url, { headers } ),\n            },\n        };\n    }\n}\n\nexport default actionCreators;","export const TRENDING_PLAYLIST_FILTERS = \"https://www.mocky.io/v2/5a25fade2e0000213aa90776\";\nexport const SPOTIFY_AUTHORIZE = \"https://accounts.spotify.com/authorize\";\nexport const SPOTIFY_FEATURED_PLAYLISTS = \"https://api.spotify.com/v1/browse/featured-playlists\";\n","import React, { Component } from \"react\";\nimport { SPOTIFY_AUTHORIZE } from \"../constants/urls\";\nimport { parseHash } from \"../utils/index.js\";\nimport PropTypes from \"prop-types\";\n\nexport default class Login extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.clearExpiredToken = this.clearExpiredToken.bind(this);\n    }\n\n    componentDidMount() {\n        const { accessToken } = this.props;\n        const hash = parseHash(window.location.hash);\n        const token = hash.access_token;\n        const expiration = hash.expires_in;\n\n        if (!accessToken && token) {\n            this.props.setAccessToken(token);\n        }\n\n        if (expiration) {\n            setTimeout(this.clearExpiredToken, expiration * 1000);\n        }\n    }\n\n    clearExpiredToken() {\n        this.props.setAccessToken(null);\n    }\n\n    getLoginURL() {\n        const client_id = \"91a84a82e4e34192a860659488ce3ecf\"\n        const redirect_uri = process.env.REACT_APP_REDIRECT_URL;\n        console.log(redirect_uri);\n        const url = `${SPOTIFY_AUTHORIZE}?client_id=${client_id}&redirect_uri=${redirect_uri}&response_type=token&show_dialog=true`;\n\n        return url;\n    }\n\n    render() {\n        const { accessToken } = this.props;\n\n        return !accessToken && (\n            <div className=\"login-container\">\n                <span className=\"login-request\">Please log in using your Spotify account to be able to see the playlists </span>\n                <a href={this.getLoginURL()} className=\"button\">Login</a>\n            </div>\n        )\n    }\n}\n\nLogin.propType = {\n    getLoginUrl: PropTypes.func.isRequired,\n}\n","import { connect } from \"react-redux\";\nimport spotifyActions from \"../actions/spotify\";\nimport Login from \"../components/Login\";\n\nfunction mapStateToProps(state) {\n    return {\n        accessToken: state.spotify.accessToken,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        setAccessToken: token => dispatch(spotifyActions.setAccessToken(token)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import {\n    GET_TRENDING_PLAYLISTS_FILTERS,\n    SET_FILTER,\n} from \"../constants/index.json\";\nimport { TRENDING_PLAYLIST_FILTERS } from \"../constants/urls\";\nimport axios from \"axios\";\n\nconst actionCreators = {\n    getFilters() {\n        return {\n            type: GET_TRENDING_PLAYLISTS_FILTERS,\n            payload: {\n                promise: axios.get(TRENDING_PLAYLIST_FILTERS)\n            }\n        };\n    },\n\n    setFilter(field, value) {\n        return {\n            type: SET_FILTER,\n            payload: {\n                field: field,\n                value: value,\n            }\n        };\n    },\n}\n\nexport default actionCreators;","import React, { Component } from \"react\";\nimport InputRange from \"react-input-range\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\nexport default class LimitFilter extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value) {\n        const { name, setFilter } = this.props\n        setFilter(name, { value });\n    };\n\n    render() {\n        const {filter: limitFilter } = this.props;\n        if (!limitFilter) {\n            return null;\n        }\n\n        const min = _.get(limitFilter, \"validation.min\", null);\n        const max = _.get(limitFilter, \"validation.max\", null);\n        const isFilterLoaded = min && max;\n\n        return <InputRange\n            maxValue={max}\n            minValue={min}\n            disabled={!isFilterLoaded}\n            value={this.props.limitValue || min}\n            onChange={this.handleChange}\n            />;\n    }\n}\n\nLimitFilter.propTypes = {\n    filter: PropTypes.object,\n    limitValue: PropTypes.number,\n    setFilter: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n}\n","import React, { Component } from \"react\"\nimport Select from \"react-select\";\nimport PropTypes from \"prop-types\";\n\nexport default class SelectFilter extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    getOptions() {\n        const { filter } = this.props;\n        const { values } = filter;\n\n        return values.map(value => ({ label: value.name, value: value.value }));\n    }\n\n    handleChange(option) {\n        const { name, setFilter } = this.props;\n        setFilter(name, option);\n    }\n\n    render() {\n        const { filter: selectFilter } = this.props;\n        if (!selectFilter) {\n            return null;\n        }\n\n        return (\n            <div>\n                <Select\n                    options={ this.getOptions() } \n                    onChange={ this.handleChange }\n                    classNamePrefix=\"select-filter\"\n                    />\n            </div>\n        )\n    }\n}\n\nSelectFilter.propTypes = {\n    filter: PropTypes.object,\n    setFilter: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n}\n","import React, { Component } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nexport default class DateFilter extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(date) {\n        const { name, setFilter, filter } = this.props;\n        const dateFormat = _.get(filter, \"validation.pattern\", \"dd/mm/yyyy\");\n        const formattedDate = moment(date).format(dateFormat.toUpperCase());\n        setFilter(name, { value: formattedDate });\n    };\n\n    render() {\n        const { filter, value } = this.props;\n        const dateFilter = filter\n        if (!dateFilter) {\n            return null;\n        }\n\n        const formattedDate = value ? moment(value).toDate() : null;\n\n        return (\n            <div>\n                <DatePicker\n                    onChange={ this.handleChange }\n                    selected={ formattedDate }\n                    />\n            </div>\n        )\n    }\n}\n\nDateFilter.propTypes = {\n    filter: PropTypes.object,\n    setFilter: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n}\n","import React, { Component } from \"react\";\nimport InputNumber from \"rc-input-number\";\nimport PropTypes from \"prop-types\";\n\nexport default class NumericFilter extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(value) {\n        const { name, setFilter } = this.props;\n        setFilter(name, { value });\n    }\n\n    render() {\n        const { filter } = this.props;\n        const numericFilter = filter\n        if (!numericFilter) {\n            return null;\n        }\n\n        return (\n            <div>\n                <InputNumber\n                    onChange={ this.handleChange }\n                    />\n            </div>\n        )\n    }\n}\n\nNumericFilter.protoTypes = {\n    setFilter: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class TextFilter extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        const { value } = event.target;\n        const { name, setFilter } = this.props;\n        setFilter(name, value);\n    }\n\n    render() {\n        return (\n            <div>\n                <input\n                    onChange={ this.handleChange }\n                    />\n            </div>\n        )\n    }\n}\n\nTextFilter.protoTypes = {\n    setFilter: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n}\n","import React, { Component } from \"react\";\nimport LimitFilter from \"./filters/LimitFilter\";\nimport SelectFilter from \"./filters/SelectFilter\";\nimport DateFilter from \"./filters/DateFilter\";\nimport NumericFilter from \"./filters/NumericFilter\";\nimport TextFilter from \"./filters/TextFilter\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nexport default class Filter extends Component {\n\n    componentDidMount() {\n        this.props.getFilters();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { accessToken, filters, fetchPlaylists } = this.props;\n        const { values: currentFilters } = filters;\n        const { values: oldFilters } = prevProps.filters;\n        const filtersChanged = !_.isEqual(currentFilters, oldFilters);\n        filtersChanged && fetchPlaylists(accessToken, currentFilters);\n    }\n\n    render() {\n        const { filters, setFilter } = this.props;\n        const {\n            limit,\n            locale,\n            country,\n            timestamp,\n            offset,\n        } = filters;\n\n        return (\n            <div className=\"filters-container\">\n                <div className=\"filter-container\" id=\"limit-filter-container\">\n                    <div className=\"filter-name\">{ (limit && limit.name) || \"\" }</div>\n                    <LimitFilter\n                        filter={ filters.limit }\n                        limitValue={ _.get(filters, \"values.limit.value\", null) }\n                        setFilter={ setFilter }\n                        name=\"limit\"\n                        />\n                </div>\n                <div className=\"filter-container\">\n                    <div className=\"filter-name\">{ (locale && locale.name) || \"\" }</div>\n                    <SelectFilter\n                        filter={ filters.locale }\n                        setFilter={ setFilter }\n                        name=\"locale\"\n                        />\n                </div>\n                <div className=\"filter-container\">\n                    <div className=\"filter-name\">{ (country && country.name) || \"\" }</div>\n                    <SelectFilter\n                        filter={ filters.country }\n                        setFilter={ setFilter }\n                        name=\"country\"\n                        />\n                </div>\n                <div className=\"filter-container\">\n                    <div className=\"filter-name\">{ (timestamp && timestamp.name) || \"\" }</div>\n                    <DateFilter\n                        filter={ filters.timestamp }\n                        setFilter={ setFilter }\n                        value={ _.get(filters, \"values.timestamp.value\", null) }\n                        name=\"timestamp\"\n                        />\n                </div>\n                <div className=\"filter-container\">\n                    <div className=\"filter-name\">{ (offset && offset.name) || \"\" }</div>\n                    <NumericFilter\n                        filter = { filters.offset }\n                        setFilter={ setFilter }\n                        name=\"offset\"\n                        />\n                </div>\n                <div className=\"filter-container\">\n                    <div className=\"filter-name\">Nome</div>\n                    <TextFilter\n                        setFilter={ setFilter }\n                        name=\"name\"\n                        />\n                </div>\n            </div>\n        )\n    }\n}\n\nFilter.propTypes = {\n    filters: PropTypes.object.isRequired,\n    limitValue: PropTypes.number,\n    accessToken: PropTypes.string,\n    fetchPlaylists: PropTypes.func.isRequired,\n    getFilters: PropTypes.func.isRequired,\n    setFilter: PropTypes.func.isRequired,\n}\n","import { connect } from \"react-redux\";\nimport filterActions from \"../actions/filters\";\nimport spotifyActions from \"../actions/spotify\";\nimport Filter from \"../components/Filter\";\n\nfunction mapStateToProps(state) {\n    return {\n        accessToken: state.spotify.accessToken,\n        filters: state.filters,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        getFilters: () => dispatch(filterActions.getFilters()),\n        setFilter: (field, value) => dispatch(filterActions.setFilter(field, value)),\n        fetchPlaylists: (accessToken, filters) => dispatch(spotifyActions.fetchFeaturedPlaylists(accessToken, filters)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from \"react\";\nimport {\n  Card, CardImg, CardBody,\n  CardTitle, CardSubtitle, Button\n} from \"reactstrap\";\nimport _ from \"lodash\";\n\nconst playlistImage = playlist => _.get(playlist, \"images[0].url\", \"\");\nconst playlistName = playlist => _.get(playlist, \"name\", \"\");\nconst playlistOwner = playlist => _.get(playlist, \"owner.display_name\", \"\");\nconst playlistLink = playlist => _.get(playlist, \"external_urls.spotify\", \"\");\n\nconst PlaylistCard = props => {\n    const { playlist } = props;\n    return playlist && (\n    <div className=\"playlists-container\">\n        <Card body inverse className=\"playlist-card\">\n        <CardImg top width=\"100%\" src={playlistImage(playlist)} alt=\"Card image cap\" />\n        <CardBody>\n            <CardTitle>{playlistName(playlist)}</CardTitle>\n            <CardSubtitle>{playlistOwner(playlist)}</CardSubtitle>\n            <Button\n                onClick={()=> window.open(playlistLink(playlist), \"_blank\")}\n                variant=\"primary\">\n                    Go to playlist\n            </Button>\n        </CardBody>\n        </Card>\n    </div>\n    );\n}\n\nexport default PlaylistCard;\n","import React, { Component } from \"react\";\nimport PlaylistCard from \"./PlaylistCard\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\nconst matchesFilter = (playlist, filter) => {\n    const playlistName = playlist.name.toUpperCase()\n    const nameFilter = filter.toUpperCase();\n    return playlistName.includes(nameFilter);\n}\n\nexport default class FeaturedPlaylists extends Component {\n\n    renderPlaylists() {\n        const { playlists, filters } = this.props;\n        const nameFilter = _.get(filters, \"name\");\n        const filteredPlaylists = nameFilter\n            ? playlists.filter(playlist => matchesFilter(playlist, filters.name))\n            : playlists;\n\n        return filteredPlaylists.map(playlist => <PlaylistCard playlist={playlist} key={_.uniq(playlist.name)} />);\n    }\n\n    fetchPlaylists() {\n        const { accessToken, fetchFeaturedPlaylists, filters } = this.props;\n        fetchFeaturedPlaylists(accessToken, filters);\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.fetchPlaylists(), 30000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n    \n    render() {\n        const { accessToken, playlists } = this.props;\n        accessToken && playlists.length === 0 && this.fetchPlaylists();\n\n        return (\n            <div className=\"playlists-list\">\n                { this.renderPlaylists() }\n            </div>\n        )\n    }\n}\n\nFeaturedPlaylists.propTypes = {\n    getFilters: PropTypes.func,\n    setFilter: PropTypes.func,\n    fetchPlaylists: PropTypes.func,\n    accessToken: PropTypes.string,\n    filters: PropTypes.object,\n}\n","import { connect } from \"react-redux\";\nimport FeaturedPlaylists from \"../components/FeaturedPlaylists\";\nimport spotifyActions from \"../actions/spotify\";\n\nfunction mapStateToProps(state) {\n    return {\n        accessToken: state.spotify.accessToken,\n        playlists: state.spotify.playlists,\n        filters: state.filters.values,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        fetchFeaturedPlaylists: (accessToken, filters) => dispatch(spotifyActions.fetchFeaturedPlaylists(accessToken, filters)),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FeaturedPlaylists);","import React, { Component } from 'react';\nimport Login from '../containers/Login';\nimport Filter from '../containers/Filter';\nimport FeaturedPlaylists from '../containers/FeaturedPlaylists';\nimport { Provider } from \"react-redux\";\nimport store from \"../store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Filter />\n          <Login />\n          <FeaturedPlaylists />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './javascript/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const parseHash = hash => hash\n    .substring(1)\n    .split(\"&\")\n    .reduce((initial, item) => {\n        if (item) {\n            const parts = item.split(\"=\");\n            initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n        return initial;\n    }, {});\n\nexport const groupBy = key => array =>\n  array.reduce((objectsByKeyValue, obj) => {\n    const value = obj[key];\n    objectsByKeyValue[value] = obj\n    return objectsByKeyValue;\n  }, {});\n\nexport const groupById = groupBy(\"id\");\n\nexport const param = params => params && Object.keys(params)\n    .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k].value))\n    .join('&');\n"],"sourceRoot":""}